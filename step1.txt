  1 #include <stdio.h>
  2 #include <stdlib.h>
  3 #include <string.h>
  4 #include <unistd.h>
  5 #include <arpa/inet.h>
  6 #include <sys/socket.h>
  7 #include <netdb.h>
  8 #include <sys/types.h>
  9
 10 int main() {
 11     int sockfd;
 12     struct addrinfo hints, *res; // res and hints variables of type     addrinfo
 13     int status;
 14     // Set up hints for an IPv6, TCP socket
 15     memset(&hints, 0, sizeof hints);
 16     hints.ai_family = AF_INET6;       // IPv6
 17     hints.ai_socktype = SOCK_STREAM;  // TCP
 18
 19     // Define the server address and port
 20     const char *server_ip = "google.com"; // Replace with actual ser    ver address
 21     const char *port = "80"; // Replace with the actual server port  22
 23     // Get address information for the server
 24     if ((status = getaddrinfo(server_ip, port, &hints, &res)) != 0)   { 
 25      fprintf(stderr, "getaddrinfo error: %s\n", gai_strerror(stat    us));
 26         return 1;
 27     }
 28
 29     // Create a socket using the address info
 30     sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protoc    ol);
 31     if (sockfd < 0) {
 32        perror("Error creating socket\n");
 33         freeaddrinfo(res); // Free memory allocated by getaddrinfo
 34         return 1;
 35     }
 36
 37     // Attempt to connect to the server
 38     if (connect(sockfd, res->ai_addr, res->ai_addrlen) == -1) {
 39       perror("Connection failed\n");
 40
 41        return 1;
 42     }
 43     printf("Press enter to continue \n");
 44     getchar();
 45     printf("Connected to the IPv6 server successfully.\n");
 46
 47     // Clean up and close the connection
 48     close(sockfd);
 49     freeaddrinfo(res); // Free memory allocated by getaddrinfo
 50     return 0;
 51 }